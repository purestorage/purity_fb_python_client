# coding: utf-8

"""
    Pure Storage FlashBlade REST 1.12 Python SDK

    Pure Storage FlashBlade REST 1.12 Python SDK. Compatible with REST API versions 1.0 - 1.12. Developed by [Pure Storage, Inc](http://www.purestorage.com/). Documentations can be found at [purity-fb.readthedocs.io](http://purity-fb.readthedocs.io/).

    OpenAPI spec version: 1.12
    Contact: info@purestorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Certificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

#BEGIN_CUSTOM
    # IR-51527: Prevent Pytest from attempting to collect this class based on name.
    __test__ = False
#END_CUSTOM

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'certificate': 'str',
        'certificate_type': 'str',
        'common_name': 'str',
        'country': 'str',
        'email': 'str',
        'intermediate_certificate': 'str',
        'issued_by': 'str',
        'issued_to': 'str',
        'key_size': 'int',
        'locality': 'str',
        'organization': 'str',
        'organizational_unit': 'str',
        'state': 'str',
        'status': 'str',
        'valid_from': 'str',
        'valid_to': 'str',
        'passphrase': 'str',
        'private_key': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'certificate': 'certificate',
        'certificate_type': 'certificate_type',
        'common_name': 'common_name',
        'country': 'country',
        'email': 'email',
        'intermediate_certificate': 'intermediate_certificate',
        'issued_by': 'issued_by',
        'issued_to': 'issued_to',
        'key_size': 'key_size',
        'locality': 'locality',
        'organization': 'organization',
        'organizational_unit': 'organizational_unit',
        'state': 'state',
        'status': 'status',
        'valid_from': 'valid_from',
        'valid_to': 'valid_to',
        'passphrase': 'passphrase',
        'private_key': 'private_key'
    }

    def __init__(self, id=None, name=None, certificate=None, certificate_type=None, common_name=None, country=None, email=None, intermediate_certificate=None, issued_by=None, issued_to=None, key_size=None, locality=None, organization=None, organizational_unit=None, state=None, status=None, valid_from=None, valid_to=None, passphrase=None, private_key=None):  # noqa: E501
        """Certificate - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._certificate = None
        self._certificate_type = None
        self._common_name = None
        self._country = None
        self._email = None
        self._intermediate_certificate = None
        self._issued_by = None
        self._issued_to = None
        self._key_size = None
        self._locality = None
        self._organization = None
        self._organizational_unit = None
        self._state = None
        self._status = None
        self._valid_from = None
        self._valid_to = None
        self._passphrase = None
        self._private_key = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if certificate is not None:
            self.certificate = certificate
        if certificate_type is not None:
            self.certificate_type = certificate_type
        if common_name is not None:
            self.common_name = common_name
        if country is not None:
            self.country = country
        if email is not None:
            self.email = email
        if intermediate_certificate is not None:
            self.intermediate_certificate = intermediate_certificate
        if issued_by is not None:
            self.issued_by = issued_by
        if issued_to is not None:
            self.issued_to = issued_to
        if key_size is not None:
            self.key_size = key_size
        if locality is not None:
            self.locality = locality
        if organization is not None:
            self.organization = organization
        if organizational_unit is not None:
            self.organizational_unit = organizational_unit
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if passphrase is not None:
            self.passphrase = passphrase
        if private_key is not None:
            self.private_key = private_key

    @property
    def id(self):
        """Gets the id of this Certificate.  # noqa: E501

        A non-modifiable, globally unique ID chosen by the system.  # noqa: E501

        :return: The id of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Certificate.

        A non-modifiable, globally unique ID chosen by the system.  # noqa: E501

        :param id: The id of this Certificate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Certificate.  # noqa: E501

        The name of the object (e.g., a file system or snapshot).  # noqa: E501

        :return: The name of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Certificate.

        The name of the object (e.g., a file system or snapshot).  # noqa: E501

        :param name: The name of this Certificate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def certificate(self):
        """Gets the certificate of this Certificate.  # noqa: E501

        The text of the certificate.  # noqa: E501

        :return: The certificate of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this Certificate.

        The text of the certificate.  # noqa: E501

        :param certificate: The certificate of this Certificate.  # noqa: E501
        :type: str
        """

        self._certificate = certificate

    @property
    def certificate_type(self):
        """Gets the certificate_type of this Certificate.  # noqa: E501

        The type of certificate. Possible values are `array` and `external`. Certificates of type `array` are used by the array to verify its identity to clients. Certificates of type `external` are used by the array to identify external servers to which it is configured to communicate.  # noqa: E501

        :return: The certificate_type of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._certificate_type

    @certificate_type.setter
    def certificate_type(self, certificate_type):
        """Sets the certificate_type of this Certificate.

        The type of certificate. Possible values are `array` and `external`. Certificates of type `array` are used by the array to verify its identity to clients. Certificates of type `external` are used by the array to identify external servers to which it is configured to communicate.  # noqa: E501

        :param certificate_type: The certificate_type of this Certificate.  # noqa: E501
        :type: str
        """

        self._certificate_type = certificate_type

    @property
    def common_name(self):
        """Gets the common_name of this Certificate.  # noqa: E501

        FQDN or management IP address of the machine presenting the certificate.  # noqa: E501

        :return: The common_name of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this Certificate.

        FQDN or management IP address of the machine presenting the certificate.  # noqa: E501

        :param common_name: The common_name of this Certificate.  # noqa: E501
        :type: str
        """

        self._common_name = common_name

    @property
    def country(self):
        """Gets the country of this Certificate.  # noqa: E501

        The country field listed in the certificate.  # noqa: E501

        :return: The country of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Certificate.

        The country field listed in the certificate.  # noqa: E501

        :param country: The country of this Certificate.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def email(self):
        """Gets the email of this Certificate.  # noqa: E501

        The email field listed in the certificate.  # noqa: E501

        :return: The email of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Certificate.

        The email field listed in the certificate.  # noqa: E501

        :param email: The email of this Certificate.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def intermediate_certificate(self):
        """Gets the intermediate_certificate of this Certificate.  # noqa: E501

        Intermediate certificate chains.  # noqa: E501

        :return: The intermediate_certificate of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._intermediate_certificate

    @intermediate_certificate.setter
    def intermediate_certificate(self, intermediate_certificate):
        """Sets the intermediate_certificate of this Certificate.

        Intermediate certificate chains.  # noqa: E501

        :param intermediate_certificate: The intermediate_certificate of this Certificate.  # noqa: E501
        :type: str
        """

        self._intermediate_certificate = intermediate_certificate

    @property
    def issued_by(self):
        """Gets the issued_by of this Certificate.  # noqa: E501

        Who issued this certificate.  # noqa: E501

        :return: The issued_by of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._issued_by

    @issued_by.setter
    def issued_by(self, issued_by):
        """Sets the issued_by of this Certificate.

        Who issued this certificate.  # noqa: E501

        :param issued_by: The issued_by of this Certificate.  # noqa: E501
        :type: str
        """

        self._issued_by = issued_by

    @property
    def issued_to(self):
        """Gets the issued_to of this Certificate.  # noqa: E501

        Who this certificate was issued to.  # noqa: E501

        :return: The issued_to of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._issued_to

    @issued_to.setter
    def issued_to(self, issued_to):
        """Sets the issued_to of this Certificate.

        Who this certificate was issued to.  # noqa: E501

        :param issued_to: The issued_to of this Certificate.  # noqa: E501
        :type: str
        """

        self._issued_to = issued_to

    @property
    def key_size(self):
        """Gets the key_size of this Certificate.  # noqa: E501

        The size of the private key for this certificate in bits.  # noqa: E501

        :return: The key_size of this Certificate.  # noqa: E501
        :rtype: int
        """
        return self._key_size

    @key_size.setter
    def key_size(self, key_size):
        """Sets the key_size of this Certificate.

        The size of the private key for this certificate in bits.  # noqa: E501

        :param key_size: The key_size of this Certificate.  # noqa: E501
        :type: int
        """

        self._key_size = key_size

    @property
    def locality(self):
        """Gets the locality of this Certificate.  # noqa: E501

        The locality field listed in the certificate.  # noqa: E501

        :return: The locality of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this Certificate.

        The locality field listed in the certificate.  # noqa: E501

        :param locality: The locality of this Certificate.  # noqa: E501
        :type: str
        """

        self._locality = locality

    @property
    def organization(self):
        """Gets the organization of this Certificate.  # noqa: E501

        The organization field listed in the certificate.  # noqa: E501

        :return: The organization of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Certificate.

        The organization field listed in the certificate.  # noqa: E501

        :param organization: The organization of this Certificate.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def organizational_unit(self):
        """Gets the organizational_unit of this Certificate.  # noqa: E501

        The organizational unit field listed in the certificate.  # noqa: E501

        :return: The organizational_unit of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._organizational_unit

    @organizational_unit.setter
    def organizational_unit(self, organizational_unit):
        """Sets the organizational_unit of this Certificate.

        The organizational unit field listed in the certificate.  # noqa: E501

        :param organizational_unit: The organizational_unit of this Certificate.  # noqa: E501
        :type: str
        """

        self._organizational_unit = organizational_unit

    @property
    def state(self):
        """Gets the state of this Certificate.  # noqa: E501

        The state/province field listed in the certificate.  # noqa: E501

        :return: The state of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Certificate.

        The state/province field listed in the certificate.  # noqa: E501

        :param state: The state of this Certificate.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this Certificate.  # noqa: E501

        The type of certificate. Possible values are self-signed and imported.  # noqa: E501

        :return: The status of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Certificate.

        The type of certificate. Possible values are self-signed and imported.  # noqa: E501

        :param status: The status of this Certificate.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def valid_from(self):
        """Gets the valid_from of this Certificate.  # noqa: E501

        The start date of when this certificate is valid.  # noqa: E501

        :return: The valid_from of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this Certificate.

        The start date of when this certificate is valid.  # noqa: E501

        :param valid_from: The valid_from of this Certificate.  # noqa: E501
        :type: str
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this Certificate.  # noqa: E501

        The end date of when this certificate is valid.  # noqa: E501

        :return: The valid_to of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this Certificate.

        The end date of when this certificate is valid.  # noqa: E501

        :param valid_to: The valid_to of this Certificate.  # noqa: E501
        :type: str
        """

        self._valid_to = valid_to

    @property
    def passphrase(self):
        """Gets the passphrase of this Certificate.  # noqa: E501

        The passphrase used to encrypt the private key.  # noqa: E501

        :return: The passphrase of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """Sets the passphrase of this Certificate.

        The passphrase used to encrypt the private key.  # noqa: E501

        :param passphrase: The passphrase of this Certificate.  # noqa: E501
        :type: str
        """

        self._passphrase = passphrase

    @property
    def private_key(self):
        """Gets the private_key of this Certificate.  # noqa: E501

        The private key used to sign the certificate.  # noqa: E501

        :return: The private_key of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this Certificate.

        The private key used to sign the certificate.  # noqa: E501

        :param private_key: The private_key of this Certificate.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Certificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Certificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
